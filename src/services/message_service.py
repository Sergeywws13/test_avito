import asyncio
from aiogram import Bot
from sqlalchemy import select
from src.models.user import User
from src.services.avito_api import get_access_token, get_chats, get_messages_from_chat, get_self_info, get_user_info, mark_chat_as_read, send_message
from src.database.db import async_session
from datetime import datetime
import logging


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def fetch_and_send_messages(bot: Bot, access_token, user_id, telegram_chat_id):
    logger.info("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    self_info = await get_self_info(access_token)
    user_id = self_info["id"]
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
    chats = await get_chats(access_token, user_id, unread_only=True)
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —á–∞—Ç—ã: {chats}")
    
    for chat in chats["chats"]:
        chat_id = chat["id"]  # ID —á–∞—Ç–∞ –∏–∑ API Avito
        messages = await get_messages_from_chat(access_token, user_id, chat_id)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞ {chat_id}: {messages}")
        
        if messages["messages"]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            last_message = next((message for message in reversed(messages["messages"]) if not message["isRead"]), None)
            if last_message:
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {last_message}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                sender_id = last_message["author_id"]
                sender_name = next((user["name"] for user in chat["users"] if user["id"] == sender_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
                message_text = last_message["content"]["text"]
                message_id = last_message["id"]  # ID —Å–æ–æ–±—â–µ–Ω–∏—è
                created_time = last_message["created"]  # –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                formatted_message = (
                    f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_name} üì®\n\n"
                    f"üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message_text}\n\n"
                    f"üìä ID —Å–æ–æ–±—â–µ–Ω–∏—è: {message_id}\n\n"
                    f"üï∞Ô∏è –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.fromtimestamp(created_time).strftime('%Y-%m-%d %H:%M:%S')}\n\n"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
                try:
                    await bot.send_message(telegram_chat_id, formatted_message)
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {telegram_chat_id}.")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {telegram_chat_id}: {e}")
                
                # –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
                await mark_chat_as_read(access_token, user_id, chat_id)
                break


async def send_message_to_avito(message_id, reply_text):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API Avito.
    """
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –º—ã –æ—Ç–≤–µ—á–∞–µ–º
    async with async_session() as session:
        # –ó–¥–µ—Å—å –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ client_id –∏ client_secret
        user = await session.execute(select(User).where(User.user_id == message_id))
        user = user.scalar_one_or_none()

        if user:
            # –ü–æ–ª—É—á–∞–µ–º access_token –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            access_token = await get_access_token(user.client_id, user.client_secret)
            if access_token:
                # –ó–¥–µ—Å—å –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API Avito –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é send_message, –ø–µ—Ä–µ–¥–∞–≤–∞—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                chat_id = message_id  # ID —á–∞—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –º—ã –æ—Ç–≤–µ—á–∞–µ–º
                response = await send_message(access_token, user.user_id, chat_id, reply_text)

                if response:
                    logger.info("–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Avito.")
                else:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ Avito.")
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å access token.")
        else:
            logger.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")


async def periodic_message_check(bot: Bot):
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –≤ Telegram.
    """
    while True:
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = await session.execute(select(User))
            users = users.scalars().all()

            for user in users:
                access_token = await get_access_token(user.client_id, user.client_secret)
                if access_token and user.telegram_chat_id:
                    await fetch_and_send_messages(bot, access_token, user.user_id, user.telegram_chat_id)
        await asyncio.sleep(1)